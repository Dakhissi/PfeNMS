version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: api_store_postgres
    environment:
      POSTGRES_DB: api_store_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - api_store_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_store_server
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/api_store_db
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 24h
      SOCKET_CORS_ORIGIN: http://localhost:5173
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - api_store_network
    restart: unless-stopped
    command: sh -c "npx prisma generate && npx prisma db push && node prisma/seed.js && npm start"

  # Prisma Studio (optional)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_store_prisma_studio
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/api_store_db
    ports:
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api_store_network
    command: npx prisma studio --hostname 0.0.0.0 --port 5555
    profiles:
      - tools

volumes:
  postgres_data:

networks:
  api_store_network:
    driver: bridge
