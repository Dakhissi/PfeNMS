// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(USER)
  avatar    String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  chatRooms ChatRoomMember[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  category    String
  imageUrl    String?
  brand       String?
  model       String?
  specifications Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
  address   String?
  phone     String?
  deliveryMethod String?
  shippingAddress Json?
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ChatRoom {
  id        String   @id @default(cuid())
  name      String?
  type      ChatRoomType @default(DIRECT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members   ChatRoomMember[]
  messages  Message[]

  @@map("chat_rooms")
}

model ChatRoomMember {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  role      ChatMemberRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
  @@map("chat_room_members")
}

model Message {
  id        String   @id @default(cuid())
  roomId    String
  senderId  String
  receiverId String?
  content   String
  type      MessageType @default(TEXT)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  SUPPORT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ChatRoomType {
  DIRECT
  GROUP
  SUPPORT
}

enum ChatMemberRole {
  MEMBER
  ADMIN
  MODERATOR
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
